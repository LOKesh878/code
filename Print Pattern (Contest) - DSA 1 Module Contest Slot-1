Problem Statement
Given an integer N, continuously divide the number by 2 until we reach 0. For each division, print the quotient and remainder in the following pattern:

Example:
For N = 7,
1st division: Quotient = 3, Remainder = 1. Pattern: 3 1
2nd division: Quotient = 1, Remainder = 1. Pattern: 3 1 1 1
3rd division: Quotient = 0, Remainder = 1. Pattern: 3 1 1 1 0 1
Input
The first line of input contains a single integer N.

Constraints:-
1 ≤ N ≤ 1000
Output
Print the pattern.
Example
Sample Input 1:
7

Sample Output 1:
3 1 1 1 0 1

Explanation 1:
1st division: Quotient = 3, Remainder = 1. Pattern: 3 1
2nd division: Quotient = 1, Remainder = 1. Pattern: 3 1 1 1
********************* code ********************
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
       Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();

        while (N != 0) {
            int quotient = N / 2;
            int remainder = N % 2;
            System.out.print(quotient + " " + remainder + " ");
            N = quotient;
        }
    }
}
3rd division: Quotient = 0, Remainder = 1. Pattern: 3 1 1 1 0 1
