Problem Statement
Print the number of reverse pairs in the array given an integer array nums.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].
Input
The first line of input will be n, which represents the array's length, followed by the n array items in the second line.

Constraints:
0<= n <=10000
1 <= nums[i] <= 10000
Output
Print the number of reverse pairs in the array.
Example
Sample Input 1:
4
1 3 4 5
Output 1:
0

Sample Input 2:
6
6 5 4 3 2 1
Output 2:
6
****************************** code ******************************
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
       Scanner scanner = new Scanner(System.in);

        // Read the array length
        int n = scanner.nextInt();

        // Read the array elements
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Calculate the number of reverse pairs
        int count = mergeSortAndCount(nums, 0, n - 1);

        // Print the result
        System.out.println(count);
    }

    private static int mergeSortAndCount(int[] nums, int left, int right) {
        int count = 0;

        if (left < right) {
            int mid = (left + right) / 2;

            // Recursively split the array and count reverse pairs
            count += mergeSortAndCount(nums, left, mid);
            count += mergeSortAndCount(nums, mid + 1, right);

            // Merge the two sorted subarrays and count reverse pairs
            count += mergeAndCount(nums, left, mid, right);
        }

        return count;
    }

    private static int mergeAndCount(int[] nums, int left, int mid, int right) {
        int count = 0;

        // Create temporary arrays for left and right subarrays
        int[] leftArray = new int[mid - left + 1];
        int[] rightArray = new int[right - mid];

        // Copy elements to temporary arrays
        for (int i = 0; i < leftArray.length; i++) {
            leftArray[i] = nums[left + i];
        }
        for (int i = 0; i < rightArray.length; i++) {
            rightArray[i] = nums[mid + 1 + i];
        }

        // Merge the two sorted subarrays
        int i = 0, j = 0, k = left;

        while (i < leftArray.length && j < rightArray.length) {
            if (leftArray[i] > 2 * (long) rightArray[j]) {
                // Found a reverse pair
                count += leftArray.length - i;
                j++;
            } else {
                i++;
            }
        }

        // Merge remaining elements
        i = 0;
        j = 0;

        while (i < leftArray.length && j < rightArray.length) {
            if (leftArray[i] <= rightArray[j]) {
                nums[k++] = leftArray[i++];
            } else {
                nums[k++] = rightArray[j++];
            }
        }

        // Copy remaining elements of leftArray, if any
        while (i < leftArray.length) {
            nums[k++] = leftArray[i++];
        }

        // Copy remaining elements of rightArray, if any
        while (j < rightArray.length) {
            nums[k++] = rightArray[j++];
        }

        return count;
    }
}
